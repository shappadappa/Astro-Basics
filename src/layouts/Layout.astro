---
import { ViewTransitions } from "astro:transitions";
import Navbar from "../components/Navbar"
import { app } from '../firebase/server';
import { getAuth } from "firebase-admin/auth"

export interface Props {
	title: string;
}

const { title } = Astro.props;

const auth = getAuth(app)
const sessionCookie = Astro.cookies.get("session")
let signedIn = false, decodedCookie

if(sessionCookie){
    decodedCookie = await auth.verifySessionCookie(sessionCookie.value)

	try{
		const user = await auth.getUser(decodedCookie.uid)

		if(user){
			signedIn = true
		}
	} catch(error){}
}
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body transition:animate="fade">
		<Navbar client:only="react" userId={decodedCookie && decodedCookie.uid ? decodedCookie.uid : null} transition:persist originalLocation={Astro.url.pathname} />
		<button class="toggle-dark-mode" transition:persist></button>
		<slot />
	</body>
</html>

<style is:global>
	@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');
	*{
		margin: 0;
		padding: 0;
		border: 0;
		font-size: 100%;
		font: inherit;
		vertical-align: baseline;
	}
	*::selection{
		background: limegreen;
		color: white;
	}
	body{
		font-family: Inter, Arial, Helvetica, sans-serif;
		background-image: url("/svg/dark-music-note.svg");
		background-size: 10% 50px;
		background-position: 0;
		background-repeat: repeat;
	}
	body.dark{
		background-image: url("/svg/light-music-note.svg");
		background-color: #222;
	}
	.text-gradient {
		background-image: linear-gradient(90deg, #333, green);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
	}
	.dark .text-gradient{
		background-image: linear-gradient(90deg, #dadada, lightgreen);
	}
	.error{
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		background: rgba(255, 0, 0, 0.35);
		color: white;
		font-size: 2rem;
		display: flex;
		justify-content: center;
		gap: 1rem;
		padding: 1.5rem 0;
		border-radius: 0 0 1rem 1rem;
		animation: drop-down 0.75s ease-out;
		z-index: 1000;
	}
	.error span{
		left: 1rem;
		font-size: 2.5rem;
		font-weight: bold;
	}
	button{
		cursor: pointer;
	}
	nav{
		position: fixed;
		top: 0;
		left: 0;
		z-index: 999;
	}
	nav a{
		text-decoration: none;
		color: inherit;
		font-weight: normal;
	}
	nav a:hover{
		text-decoration: none;
	}
	nav.seen{
		background: #eee;
		height: 100%;
		box-shadow: 0 0 50px 10px #bbb;
		transition: all 0.5s ease-out, background 0, box-shadow 0;
	}
	.dark nav.seen{
		background: #222;
		color: #dadada;
		box-shadow: 0 0 50px 10px #555;
	}
	nav .toggle-visibility-container{
		padding: 0.75rem;
		display: flex;
		align-items: center;
		gap: 1rem;
		background: rgba(255, 255, 255, 0.75);
		border-bottom-right-radius: 1rem;
	}
	.dark nav .toggle-visibility-container{
		background: rgba(0, 0, 0, 0.5);
		color: #dadada;
	}
	nav.seen .toggle-visibility-container{
		background: none;
	}
	nav .toggle-visibility-container button{
		background: transparent;
		display: grid;
		place-items: center;
	}
	.dark nav .toggle-visibility-container button{
		color: #dadada;
	}
	nav .toggle-visibility-container button:focus-within{
		outline: none;
	}
	nav .toggle-visibility-container svg{
		scale: 2;
	}
	nav .toggle-visibility-container a{
		font-size: 1.5rem;
		letter-spacing: -1.5px;
	}
	nav .links{
		font-size: 1.5rem;
	}
	nav.not-played .links{
		opacity: 0;
		animation: slide-right 0.5s ease-out forwards;
	}
	nav .links li{
		margin: 0.5rem 1rem;
		list-style-type: none;
	}
	nav .links li.account-modifier{
		background: #444;
		color: white;
		border-radius: 0.25rem;
		padding: 0.25rem;
	}
	.dark nav .links li.account-modifier{
		background: white;
		color: #444;
	}
	nav .links li.active{
		background: #dadada;
		border-radius: 0.25rem;
	}
	.dark nav .links li.active{
		background: #444;
	}
	nav .links li.active.account-modifier{
		background: #444;
	}
	.dark nav .links li.active.account-modifier{
		background: #ccc;
	}
	nav .links a{
		padding: 0.5rem;
	}
	nav .links svg{
		scale: 1.5;
		margin-right: 1rem;
	}
	.toggle-dark-mode{
		position: fixed;
		top: 0;
		right: 0;
		padding: 1rem;
		background: #eaeaea;
		border-bottom-left-radius: 0.5rem;
	}
	.dark .toggle-dark-mode{
		background: #333;
		color: white;
	}
	.toggle-dark-mode svg{
		scale: 2;
	}

	main{
		margin: 4rem auto;
		padding: 2rem;
		max-width: 800px;
		background: rgba(234, 234, 234, 0.65);
		border-radius: 1rem;
		box-shadow: 0 0 50px 10px #eaeaea;
		color: #555;
	}
	.dark main{
		background: rgb(68, 68, 68, 0.85);
		color: #eaeaea;
		box-shadow: 0 0 50px 10px #444;
	}
	h1{
		font-size: clamp(2rem, 5vw, 2.75rem);
		font-weight: 800;
		margin: 0;
		color: #333;
		border-bottom: 1px dotted #333;
		text-align: center;
	}
	.dark h1{
		color: #dadada;
		border-bottom-color: #dadada;
	}
	.songs-container{
		padding: 2rem;
		box-shadow: 0 0 50px 10px #fff9ed inset;
		border-radius: 1rem;
	}
	.dark .songs-container{
		box-shadow: 0 0 50px 10px #443c30 inset;
	}
	.songs-container h2{
		font-size: clamp(1.5rem, 4vw, 2rem);
		font-weight: bold;
		letter-spacing: -1px;
	}
	.songs-container .songs{
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 1rem;
		margin: 1rem 0;
	}
	p, form{
		background: white;
		margin: 1rem 0;
		border-radius: 1rem;
		padding: 0.5rem 1rem;
		line-height: 1.75rem;
		text-wrap: balance;
		text-align: justify;
	}
	.dark p, .dark form{
		background: #555;
	}
	form{
		border: 1px dotted limegreen;
		margin: 2rem 0;
		font-size: 1.25rem;
	}
	.dark form{
		border-color: green;
	}
	form label{
		text-decoration: underline;
	}
	form input{
		display: block;
		max-width: 100%;
		margin-bottom: 1rem;
		background: #eaeaea;
		border-radius: 0.5rem;
		padding: 0.125rem 0.25rem;
		transition: 0.5s ease-out;
		border: 1px solid transparent;
	}
	form input:focus-within{
		outline: none;
		border-color: #cacaca;
		background: #e5e5e5;
	}
	form input[type="submit"]{
		background: limegreen;
		color: white;
		font-weight: bold;
		cursor: pointer;
		padding: 0.5rem;
		border: 1px solid green;
		transition: 1s ease-out;
		margin: 2rem;
	}
	.dark form input[type="submit"]{
		background: green;
		border-color: darkgreen;
	}
	form input[type="submit"]:hover{
		background: green;
	}
	.dark form input[type="submit"]:hover{
		background: darkgreen;
	}
	form .view-password{
		padding: 0.125rem 0.25rem;
		margin: 0 1rem;
		border-radius: 100%;
	}
	.not-found{
        text-align: center;
        background: #ddd;
        padding: 0.5rem 0.5rem;
        margin: 1rem 0;
        border-radius: 0.5rem;
    }
    .dark .not-found{
        background: #666;
    }
    .not-found p{
        color: #666;
        text-align: center;
        background: none;
        line-height: normal;
        padding: 0;
        font-size: clamp(0.75rem, 4vw, 1rem);
        font-style: italic;
    }
    .dark .not-found p{
        color: #ddd;
    }
    .not-found a{
        color: inherit;
        text-decoration: none;
        font-size: clamp(1rem, 4vw, 1.25rem);
		background: rgba(0, 0, 0, 0.25);
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
    }

	@keyframes slide-right{
		0%{translate: -100%}
		100%{translate: 0; opacity: 1}
	}
	@keyframes drop-down{
		0%{transform: translateY(-100%)}
		100%{transform: translateY(0)}
	}

	@media (max-width: 768px){
		nav{
			margin: 0 auto;
		}
		nav .toggle-visibility-container{
			margin: 0 auto;
		}
		nav.seen{
			height: auto;
			padding-bottom: 1rem;
			width: 100%;
			background: rgba(238, 238, 238, 0.85);
		}
		.dark nav.seen{
			background: rgba(34, 34, 34, 0.85);
		}
		nav.seen .links{
			max-width: 75%;
			margin: 0 auto;
		}
		main{
			padding: 1rem;
		}
		.songs-container .songs{
			display: flex;
			flex-direction: column;
		}
	}
	@media (max-width: 360px){
		.songs-container{
			padding: 0.5rem;
		}
	}
</style>

<script>
	const colourMode = () =>{
		const body = document.querySelector("body")
		const toggleBtn = document.querySelector(".toggle-dark-mode")

		const toggleDark = (dark: boolean) =>{
			document.cookie = dark ? "dark=true" : "dark=false"
			
			toggleBtn.innerHTML = dark ? 
			// sun
				`
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
						<path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
					</svg>
				`
			:
			// moon
				`
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
						<path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278zM4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z"/>
					</svg>
				`
		}

		// adapted from https://stackoverflow.com/questions/10730362/get-cookie-by-name
		const darkModeCookie = `; ${document.cookie}`.split(`; dark=`).pop().split(';').shift()

		// if the user accesses the website for the first time, use the system preference. otherwise, use the value stored in the cookie
		if(darkModeCookie.length === 0){
			if(window.matchMedia("(prefers-color-scheme: dark)").matches){
				document.cookie = "dark=true"
				body.classList.add("dark")
				toggleDark(true)
			} else{
				document.cookie = "dark=false"
			}
		} else{
			if(darkModeCookie === "true"){
				body.classList.add("dark")
				toggleDark(true)
			} else{
				toggleDark(false)
			}
		}

		toggleBtn.addEventListener("click", e =>{
			body.classList.toggle("dark")
			toggleDark(body.classList.contains("dark"))
		})
	}

	const setActiveButton = () =>{
		document.querySelectorAll("nav .links li a").forEach(a =>{
			const pathname = a.href.replace(window.location.origin, "")

			if(pathname === window.location.pathname){
				a.parentElement.classList.add("active")
			} else{
				a.parentElement.classList.remove("active")
			}
		})
	}

	colourMode()
	document.addEventListener("astro:after-swap", () =>{
		colourMode()

		// in case the nav hasn't been opened yet
		document.querySelector("nav .toggle-visibility-container button").addEventListener("click", () =>{
			setActiveButton()
		})
		
		// in case the nav is already open
		setActiveButton()
	})
</script>