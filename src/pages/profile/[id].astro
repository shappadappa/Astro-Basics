---
import Layout from "../../layouts/Layout.astro"
import { app, db } from "../../firebase/server"
import { getAuth } from "firebase-admin/auth"
import SongCard from "../../components/SongCard"

const auth = getAuth(app)
const sessionCookie = Astro.cookies.get("session")

if(!sessionCookie){
	return Astro.redirect("/login")
}

let user = {}, decodedCookie
try{
    decodedCookie = await auth.verifySessionCookie(sessionCookie.value)

	user = await auth.getUser(decodedCookie.uid)
} catch(error){
    Astro.cookies.delete("session")
	return Astro.redirect("/login")
}

if(!user){
	return Astro.redirect("/login")
}

const {id} = Astro.params

const userSnapshot = await db.collection("users").doc(id).get()

let username, userLikes, chords, userLikedSongs = [], addedSongs, loggedInUserLikedSongs

if(userSnapshot.exists){
    username = userSnapshot.data().username
    userLikes = userSnapshot.data().likes
    chords = userSnapshot.data().chords

    if(userLikes.length > 0){
        userLikedSongs = (await db.collection("songs").where("__name__", "in", userLikes).get()).docs.map(song => ({
            id: song.id, 
            ...song.data()
        }))
    }

    addedSongs = (await db.collection("songs").where("userUid", "==", id).get()).docs.map(song => ({
        id: song.id, 
        ...song.data()
    }))

    loggedInUserLikedSongs = (await db.collection("users").doc(user.uid).get()).data().likes
}
---

<Layout title="Astro Basics">
    <main>
        {userSnapshot.exists ?
            <>
                <h1>
                    <span>{decodedCookie.uid === id  ? "Your" : `${username}'s`} Profile</span>
                    {decodedCookie.uid === id && <button class="delete-profile">Delete Profile</button>}
                </h1>

                <h2 class="chords-count">Chords: {chords}</h2>

                <div class="songs-container liked">
                    {userLikedSongs.length > 0 ? 
                        <>
                            <h2>‚ù§ Liked Songs:</h2>

                            <div class="songs">
                                {userLikedSongs.map(song => (
                                    <SongCard 
                                        client:only="react" 
                                        loggedInUserId={user.uid} 
                                        userId={song.userUid} 
                                        spotifyId={song.id} 
                                        sessionCookie={sessionCookie.value} 
                                        alreadyLiked={loggedInUserLikedSongs.includes(song.id)} 
                                        forceRefresh={true}
                                        likesCount={song.likes}
                                        createdAt={song.createdAt}
                                    />
                                ))}
                            </div>
                        </>
                    :
                        <h2>üíî No liked songs</h2>
                    }
                </div>

                
                <div class="songs-container added">
                    {addedSongs.length > 0 ?
                        <>
                            <h2>üéß Added Songs: {addedSongs.length}/5 songs added</h2>

                            <div class="songs">
                                {addedSongs.map(song => (
                                    <SongCard 
                                        client:only="react" 
                                        loggedInUserId={null} 
                                        userId={null} 
                                        spotifyId={song.id} 
                                        sessionCookie={sessionCookie.value} 
                                        alreadyLiked={loggedInUserLikedSongs.includes(song.id)} 
                                        forceRefresh={true}
                                        likesCount={song.likes}
                                        createdAt={song.createdAt}
                                    />
                                ))}
                            </div>
                        </>
                    :
                        <h2>üîá No added songs</h2>
                    }
                </div>
            </>
        :
            <>
                <h1>User was not found</h1>

                <div class="not-found">
                    <p>How did you get here...?</p>
                    <a href="/">Home</a>
                </div>
            </>
    </main>
</Layout>

<style>
    h1{
        display: flex;
        align-items: center;
        justify-content: space-around;
    }
    h1 span{
        flex-grow: 1;
    }
    .delete-profile{
        background: #710000;
        border-radius: 0.5rem;
        padding: 0.5rem;
        color: white;
        font-size: clamp(1rem, 2vw, 1.5rem);
        border: 2px solid transparent;
        transition: 0.5s ease-out;
    }
    .delete-profile:hover{
        background: #5a0000;
        border-color: #3f0000;
    }
    .chords-count{
        margin: 1rem 0;
        font-weight: bold;
        font-size: clamp(1.5rem, 4vw, 1.75rem);
    }
    .songs-container{
        margin: 2rem 0;
        border: 1px solid #cacaca;
    }
    .songs-container.liked{
        background: rgba(255, 204, 110, 0.1);
        box-shadow: 0 0 50px 10px rgba(255, 204, 110, 0.35) inset;
    }
    body.dark .songs-container.liked{
        box-shadow: 0 0 50px 10px rgb(255, 204, 110) inset;
    }
    .songs-container.added{
        background: rgba(41, 214, 101, 0.1);
        box-shadow: 0 0 50px 10px rgba(41, 214, 101, 0.35) inset;
    }
    body.dark .songs-container.added{
        box-shadow: 0 0 50px 10px rgb(41, 214, 101) inset;
    }
    h2{
        border-radius: 1rem;
        padding: 0.25rem 0.5rem;
    }
    .liked h2{
        background: rgba(255, 204, 110, 0.25);
    }
    .added h2{
        background: rgba(41, 214, 101, 0.25);
    }
</style>

<script define:vars={{ sessionCookie, decodedCookie, id }}>
    if(decodedCookie.uid === id){
        const deleteProfile = async() =>{
            const res = await fetch(`/api/users/${id}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${sessionCookie.value}`
                }
            })

            const json = await res.json()

            if(res.ok){
                window.location = "/login"
                document.cookie = "session=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"
            } else{
                console.error(json.error)
            }
        }

        document.querySelector(".delete-profile").addEventListener("click", async(e) =>{
            if(confirm("Are you sure you would like to delete your profile (this action is permanent!)")){
                deleteProfile()
            }
        })
    }
</script>